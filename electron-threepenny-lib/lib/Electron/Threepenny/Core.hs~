{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE InstanceSigs #-}

module Electron.Threepenny where

import Data.List                   (intercalate)
import Data.Maybe                  (catMaybes)
import Language.Javascript.JMacro
import Graphics.UI.Threepenny.Core
import Foreign.JavaScript           (IsHandler)
import Control.Monad                (void)

mkModal :: String -> JExpr -> Window -> IO ()
mkModal url op = mkHandler $ -- \window ->
    runFunction $ ffi $ show $ renderJs
        [jmacro|
            var {|BrowserWindow: BrowserWindow,
                  ipcMain: ipcMain|} = remote;
            var modal = new BrowserWindow({parent: remote.getCurrentWindow(),
                                           modal: true,
                                           show: false});
            modal.setMenu(null);
            modal.loadURL('file://' + require('path').join(remote.app.getAppPath(), `(url)`));

            ipcMain.once('setSize', \event width height {
                wRatio = 1.25;
                hRatio = 1.25;
                modal.setSize(Math.floor(width * wRatio), Math.floor(height * hRatio));
            });
            var findValue;
            ipcMain.once('closeDialog', `(op)`);

            modal.once('ready-to-show', \() { modal.show() })
        |]

class MkHandler h where
    type AssocHandler h
    mkHandler :: h -> Window -> AssocHandler h
instance MkHandler (UI a) where
    type AssocHandler (UI a) = IO ()
    mkHandler :: UI a -> Window -> IO ()
    mkHandler h win = void $ runUI win h
instance MkHandler a => MkHandler (b -> a) where
    type AssocHandler (b -> a) = b -> AssocHandler a
    mkHandler :: (b -> a) -> Window -> (b -> (AssocHandler a))
    mkHandler h win = \b -> mkHandler (h b) win

export :: IsHandler h => String -> h -> UI ()
export name f = do
    handler <- ffiExport f
    runFunction $ ffi ("window." ++ name ++ " = %1") handler
